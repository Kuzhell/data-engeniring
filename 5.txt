DROP TABLE IF EXISTS Customers;
DROP TABLE IF EXISTS Orders;
DROP TABLE IF EXISTS Categories;
DROP TABLE IF EXISTS Products;
DROP TABLE IF EXISTS OrderDetails;

CREATE TABLE IF NOT EXISTS Customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(20),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

INSERT OR REPLACE INTO Customers (customer_id, customer_name, email, phone) VALUES
(1, 'Наталія Іванова', 'natalia.ivanova@example.com', '380501234567'),
(2, 'Олександр Коваль', 'alex.koval@example.com', '380671112233'),
(3, 'Марина Павленко', 'marina.pavlenko@example.com', '380931234567'),
(4, 'Іван Ткаченко', 'ivan.tkachenko@example.com', '380951234567'),
(5, 'Тарас Мельник', 'taras.melnyk@example.com', '380971234567');

CREATE TABLE IF NOT EXISTS Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE NOT NULL,
    total_price DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ON DELETE CASCADE
);

INSERT INTO Orders (order_id, customer_id, order_date, total_price) VALUES
(1, 1, '2025-02-14', 1560.75),
(2, 2, '2025-02-13', 275.50),
(3, 3, '2025-02-12', 399.99),
(4, 4, '2025-02-11', 649.80),
(5, 5, '2025-02-10', 989.99);

CREATE TABLE IF NOT EXISTS Categories (
    category_id INT PRIMARY KEY,
    category_name VARCHAR(100) NOT NULL
);

INSERT INTO Categories (category_id, category_name) VALUES
(1, 'Електроніка'),
(2, 'Одяг'),
(3, 'Книги'),
(4, 'Побутова техніка'),
(5, 'Іграшки');

CREATE TABLE IF NOT EXISTS Products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100) NOT NULL,
    category_id INT,
    price DECIMAL(10,2) NOT NULL,
    stock_quantity INT NOT NULL,
    FOREIGN KEY (category_id) REFERENCES Categories(category_id) ON DELETE SET NULL
);

INSERT INTO Products (product_id, product_name, category_id, price, stock_quantity) VALUES
(1, 'Ноутбук ASUS', 1, 1200.00, 30),
(2, 'Смартфон Samsung', 1, 899.99, 50),
(3, 'Футболка Adidas', 2, 35.00, 200),
(4, 'Книга "Інтернет-реклама"', 3, 19.99, 150),
(5, 'Лялька Barbie', 5, 25.00, 100);

CREATE TABLE IF NOT EXISTS OrderDetails (
    order_detail_id INT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES Orders(order_id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES Products(product_id) ON DELETE CASCADE
);

INSERT INTO OrderDetails (order_detail_id, order_id, product_id, quantity, price) VALUES
(1, 1, 1, 1, 1200.00),
(2, 1, 3, 2, 35.00),
(3, 2, 2, 1, 899.99),
(4, 3, 4, 1, 19.99),
(5, 4, 5, 3, 25.00),
(6, 5, 1, 2, 1200.00);

SELECT SUM(total_price) FROM Orders;

SELECT customer_id, COUNT(order_id) AS order_count
FROM Orders
GROUP BY customer_id;

SELECT 
    MIN(price) AS min_price,
    MAX(price) AS max_price,
    AVG(price) AS avg_price
FROM Products;

SELECT 
    p.category_id, 
    SUM(od.quantity) AS total_sold
FROM OrderDetails od
JOIN Products p ON od.product_id = p.product_id
GROUP BY p.category_id;

SELECT 
    p.category_id, 
    SUM(od.quantity) AS total_sold
FROM OrderDetails od
JOIN Products p ON od.product_id = p.product_id
GROUP BY p.category_id
HAVING SUM(od.quantity) > 100;

SELECT order_id
FROM Orders
WHERE total_price > (SELECT AVG(total_price) FROM Orders);

SELECT customer_id
FROM Customers
WHERE customer_id IN (SELECT DISTINCT customer_id FROM Orders);

SELECT product_id
FROM Products
WHERE product_id NOT IN (SELECT DISTINCT product_id FROM OrderDetails);

SELECT p.product_id, p.product_name, p.price, p.category_id
FROM Products p
WHERE p.price = (
    SELECT MAX(price)
    FROM Products
    WHERE category_id = p.category_id
);

